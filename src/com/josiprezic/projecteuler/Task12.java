package com.josiprezic.projecteuler;

/*
* Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
* */


public class Task12 {

    private static int requiredNumberOfDivisors = 500;

    public static void run() {

        int currentNumberOfDivisors = 0;
        long currentTriangleNumber = 0;
        long counter = 0;

        //////////////////////
        int divisorsMax = 0;
        //////////////////////



        while(currentNumberOfDivisors < requiredNumberOfDivisors) {
            currentNumberOfDivisors = 0;
            counter++;
            currentTriangleNumber += counter;


            /*for (int i = 1; i <= counter; i++) {
                currentTriangleNumber += i;
            }*/

            System.out.println("Current truangle number: " + currentTriangleNumber);
            /*for (int i = currentTriangleNumber; i > 0; i--) {
                if (currentTriangleNumber % i == 0) {
                    currentNumberOfDivisors++;
                }
            }*/

            currentNumberOfDivisors = getNumberOfDivisors(currentTriangleNumber);

            if (currentNumberOfDivisors > requiredNumberOfDivisors) {
                System.out.println("TASK 12: " + currentNumberOfDivisors);
                System.out.println("TASK 12: " + currentTriangleNumber);
                return;
            }

            if (currentNumberOfDivisors > divisorsMax) {
                divisorsMax = currentNumberOfDivisors;
                //System.out.println("MAX number of divisors = " + divisorsMax);
            }


            ///////////////////////
            System.out.println("MAX number of divisors = " + divisorsMax);
            ///////////////////////
        }
    }

    /*private static int getNumberOfDivisors(long n) {
        if (n % 2 == 0) {
            n = n/2;
        }

        int divisors = 1;
        int count = 1;
        while (n % 2 == 0) {
            count++;
            n /= 2;
        }
        divisors = divisors * (count + 1);
        int p = 3;

        while (n != 1) {
            count = 0;
            while (n % p == 0) {
                count++;
                n = n/p;
            }
            divisors = divisors * (count + 1);
            p += 2;
        }
        return divisors;
    }*/

    private static int getNumberOfDivisors(long n)
    {
        int numberOfDivisors = 0;
        for (int i=1; i<=Math.sqrt(n); i++)
        {
            if (n%i==0)
            {
                if (n/i == i)
                    numberOfDivisors++;

                else
                    numberOfDivisors += 2;
            }
        }
        return numberOfDivisors;
    }
}
